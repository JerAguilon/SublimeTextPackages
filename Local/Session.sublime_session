{
	"folder_history":
	[
		"/media/storage/Documents/GitHub/GoogleFoobarSolutions"
	],
	"last_version": 3103,
	"last_window_id": 6,
	"log_indexing": false,
	"settings":
	{
		"new_window_height": 0.0,
		"new_window_settings":
		{
			"auto_complete":
			{
				"selected_items":
				[
					[
						"Min",
						"MinionInfo"
					],
					[
						"generate",
						"generateExpected"
					],
					[
						"current",
						"currentPermutation"
					],
					[
						"minion",
						"minionPermutation"
					],
					[
						"minon",
						"minionPermutation"
					],
					[
						"end",
						"endTime"
					],
					[
						"start",
						"startNode"
					]
				]
			},
			"build_system_choices":
			[
				[
					[
						[
							"Packages/Java/Ant.sublime-build",
							""
						],
						[
							"Packages/Java/JavaC.sublime-build",
							""
						]
					],
					[
						"Packages/Java/JavaC.sublime-build",
						""
					]
				],
				[
					[
						[
							"Packages/Java/Ant.sublime-build",
							""
						],
						[
							"Packages/Java/JavaC.sublime-build",
							""
						],
						[
							"Packages/Vintageous/Vintageous.sublime-build",
							""
						],
						[
							"Packages/Vintageous/Vintageous.sublime-build",
							"Vintageous - Test (All)"
						],
						[
							"Packages/Vintageous/Vintageous.sublime-build",
							"Vintageous - Test (This File Only)"
						]
					],
					[
						"Packages/Java/JavaC.sublime-build",
						""
					]
				],
				[
					[
						[
							"Packages/Python/Python.sublime-build",
							""
						],
						[
							"Packages/Python/Python.sublime-build",
							"Syntax Check"
						]
					],
					[
						"Packages/Python/Python.sublime-build",
						""
					]
				]
			],
			"build_varint": "",
			"command_palette":
			{
				"height": 179.0,
				"last_filter": "git push ",
				"selected_items":
				[
					[
						"git push ",
						"Git: Push Current Branch"
					],
					[
						"git push",
						"Git: Push"
					],
					[
						"github",
						"Git: Push Current Branch"
					],
					[
						"git commit",
						"Git: Commit"
					],
					[
						"git add",
						"Git: Add All"
					],
					[
						"install pack",
						"Package Control: Install Package"
					],
					[
						"install ",
						"Package Control: Install Package"
					],
					[
						"remove",
						"Package Control: Remove Package"
					],
					[
						"insall",
						"Package Control: Install Package"
					],
					[
						"package controL:install",
						"Package Control: Install Package"
					],
					[
						"package",
						"Package Control: Remove Package"
					],
					[
						"list pa",
						"Package Control: List Packages"
					],
					[
						":packages",
						"Package Control: List Packages"
					],
					[
						"install p",
						"Package Control: Install Package"
					],
					[
						"vintag",
						"Package Control: Advanced Install Package"
					],
					[
						"git",
						"Git: Init"
					],
					[
						"git ",
						"Package Control: Install Package"
					],
					[
						":w",
						":w - Save"
					],
					[
						"install",
						"Package Control: Install Package"
					],
					[
						"",
						"Bookmarks: Clear All"
					],
					[
						"package remo",
						"Package Control: Remove Package"
					],
					[
						"install packa",
						"Package Control: Install Package"
					],
					[
						"package ",
						"Preferences: Browse Packages"
					]
				],
				"width": 547.0
			},
			"console":
			{
				"height": 126.0,
				"history":
				[
					"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"file_history":
			[
				"/media/storage/Documents/GitHub/GoogleFoobarSolutions/.gitignore",
				"/home/jeremy/.config/sublime-text-3/Packages/Default/Preferences.sublime-settings",
				"/home/jeremy/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap",
				"/home/jeremy/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
				"/media/storage/Documents/GitHub/GoogleFoobarSolutions/src/Level 3/HashingItOut/HashingItOut.java",
				"/media/storage/Documents/GitHub/GoogleFoobarSolutions/Level 3/StringCleaning/Answer.java",
				"/home/jeremy/Desktop/Interrogation.java",
				"/home/jeremy/Desktop/Answer.java",
				"/media/storage/Documents/GitHub/GoogleFoobarSolutions/Level 2/MinionInterrogation/solution.py",
				"/home/jeremy/Desktop/Test.java",
				"/home/jeremy/.ssh/config",
				"/etc/ssh/sshd_config"
			],
			"find":
			{
				"height": 23.0
			},
			"find_in_files":
			{
				"height": 104.0,
				"where_history":
				[
					"<current selection>",
					"selection",
					""
				]
			},
			"find_state":
			{
				"case_sensitive": false,
				"find_history":
				[
					"LineUpTheCaptivesTest",
					"system.out",
					"[",
					"<>();\n",
					"TimeSpan"
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
					"{",
					"TimeNode"
				],
				"reverse": false,
				"show_context": false,
				"use_buffer2": false,
				"whole_word": false,
				"wrap": true
			},
			"incremental_find":
			{
				"height": 23.0
			},
			"input":
			{
				"height": 31.0
			},
			"menu_visible": true,
			"output.exec":
			{
				"height": 23.0
			},
			"output.find_results":
			{
				"height": 98.0
			},
			"output.git":
			{
				"height": 98.0
			},
			"pinned_build_system": "",
			"replace":
			{
				"height": 42.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 500.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 380.0
			},
			"select_symbol":
			{
				"height": 400.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 400.0
			},
			"show_minimap": false,
			"show_open_files": false,
			"show_tabs": true,
			"side_bar_visible": true,
			"side_bar_width": 230.0,
			"status_bar_visible": true,
			"template_settings":
			{
			}
		},
		"new_window_width": 0.0
	},
	"windows":
	[
		{
			"auto_complete":
			{
				"selected_items":
				[
					[
						"Min",
						"MinionInfo"
					],
					[
						"generate",
						"generateExpected"
					],
					[
						"current",
						"currentPermutation"
					],
					[
						"minion",
						"minionPermutation"
					],
					[
						"minon",
						"minionPermutation"
					],
					[
						"end",
						"endTime"
					],
					[
						"start",
						"startNode"
					]
				]
			},
			"buffers":
			[
				{
					"file": "/media/storage/Documents/GitHub/GoogleFoobarSolutions/src/Level 4/LineUpTheCaptives/readme.txt",
					"settings":
					{
						"buffer_size": 2432,
						"line_ending": "Unix"
					}
				},
				{
					"contents": "import org.junit.runner.JUnitCore;\nimport org.junit.runner.Result;\nimport org.junit.runner.notification.Failure;\n\npublic class TestRunner {\n   public static void main(String[] args) {\n      Result result = JUnitCore.runClasses(LineUpTheCaptivesTest.class, StringCleaningTest.java);\n      for (Failure failure : result.getFailures()) {\n         System.out.println(failure.toString());\n      }\n      System.out.println(result.wasSuccessful());\n   }\n}  	",
					"file": "/media/storage/Documents/GitHub/GoogleFoobarSolutions/tests/TestRunner.java",
					"file_size": 452,
					"file_write_time": 131108416771475887,
					"settings":
					{
						"buffer_size": 451,
						"line_ending": "Unix"
					}
				},
				{
					"contents": "Package Control Messages\n========================\n\nSummitLinter\n------------\n\n  SummitLinter\n  -------------------------------\n  This linter plugin for SublimeLinter provides an interface to luacheck and SummitEditor.\n  \n  ** IMPORTANT! **\n  \n  Before this plugin will activate, you *must*\n  follow the installation instructions here:\n  \n  https://github.com/corvisacloud/SummitLinter\n",
					"settings":
					{
						"buffer_size": 385,
						"line_ending": "Unix",
						"name": "Package Control Messages",
						"read_only": true,
						"scratch": true
					}
				}
			],
			"build_system": "",
			"build_system_choices":
			[
				[
					[
						[
							"Packages/Java/Ant.sublime-build",
							""
						],
						[
							"Packages/Java/JavaC.sublime-build",
							""
						]
					],
					[
						"Packages/Java/JavaC.sublime-build",
						""
					]
				],
				[
					[
						[
							"Packages/Java/Ant.sublime-build",
							""
						],
						[
							"Packages/Java/JavaC.sublime-build",
							""
						],
						[
							"Packages/Vintageous/Vintageous.sublime-build",
							""
						],
						[
							"Packages/Vintageous/Vintageous.sublime-build",
							"Vintageous - Test (All)"
						],
						[
							"Packages/Vintageous/Vintageous.sublime-build",
							"Vintageous - Test (This File Only)"
						]
					],
					[
						"Packages/Java/JavaC.sublime-build",
						""
					]
				],
				[
					[
						[
							"Packages/Python/Python.sublime-build",
							""
						],
						[
							"Packages/Python/Python.sublime-build",
							"Syntax Check"
						]
					],
					[
						"Packages/Python/Python.sublime-build",
						""
					]
				]
			],
			"build_varint": "",
			"command_palette":
			{
				"height": 400.0,
				"last_filter": "package",
				"selected_items":
				[
					[
						"package",
						"Package Control: Install Package"
					],
					[
						"git push ",
						"Git: Push Current Branch"
					],
					[
						"git push",
						"Git: Push"
					],
					[
						"github",
						"Git: Push Current Branch"
					],
					[
						"git commit",
						"Git: Commit"
					],
					[
						"git add",
						"Git: Add All"
					],
					[
						"install pack",
						"Package Control: Install Package"
					],
					[
						"install ",
						"Package Control: Install Package"
					],
					[
						"remove",
						"Package Control: Remove Package"
					],
					[
						"insall",
						"Package Control: Install Package"
					],
					[
						"package controL:install",
						"Package Control: Install Package"
					],
					[
						"list pa",
						"Package Control: List Packages"
					],
					[
						":packages",
						"Package Control: List Packages"
					],
					[
						"install p",
						"Package Control: Install Package"
					],
					[
						"vintag",
						"Package Control: Advanced Install Package"
					],
					[
						"git",
						"Git: Init"
					],
					[
						"git ",
						"Package Control: Install Package"
					],
					[
						":w",
						":w - Save"
					],
					[
						"install",
						"Package Control: Install Package"
					],
					[
						"",
						"Bookmarks: Clear All"
					],
					[
						"package remo",
						"Package Control: Remove Package"
					],
					[
						"install packa",
						"Package Control: Install Package"
					],
					[
						"package ",
						"Preferences: Browse Packages"
					]
				],
				"width": 547.0
			},
			"console":
			{
				"height": 126.0,
				"history":
				[
					"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"expanded_folders":
			[
				"/media/storage/Documents/GitHub/GoogleFoobarSolutions"
			],
			"file_history":
			[
				"/media/storage/Documents/GitHub/GoogleFoobarSolutions/tests/MinionBoredGameTest.java",
				"/home/jeremy/.config/sublime-text-3/Packages/Default/Preferences.sublime-settings",
				"/home/jeremy/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap",
				"/home/jeremy/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
				"/media/storage/Documents/GitHub/GoogleFoobarSolutions/src/Level 3/HashingItOut/HashingItOut.java",
				"/media/storage/Documents/GitHub/GoogleFoobarSolutions/.gitignore",
				"/media/storage/Documents/GitHub/GoogleFoobarSolutions/Level 3/StringCleaning/Answer.java",
				"/home/jeremy/Desktop/Interrogation.java",
				"/home/jeremy/Desktop/Answer.java",
				"/media/storage/Documents/GitHub/GoogleFoobarSolutions/Level 2/MinionInterrogation/solution.py",
				"/home/jeremy/Desktop/Test.java",
				"/home/jeremy/.ssh/config",
				"/etc/ssh/sshd_config"
			],
			"find":
			{
				"height": 23.0
			},
			"find_in_files":
			{
				"height": 104.0,
				"where_history":
				[
					"<current selection>",
					"selection",
					""
				]
			},
			"find_state":
			{
				"case_sensitive": false,
				"find_history":
				[
					"LineUpTheCaptivesTest",
					"system.out",
					"[",
					"<>();\n",
					"TimeSpan"
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
					"{",
					"TimeNode"
				],
				"reverse": false,
				"show_context": false,
				"use_buffer2": false,
				"whole_word": false,
				"wrap": true
			},
			"folders":
			[
				{
					"path": "/media/storage/Documents/GitHub/GoogleFoobarSolutions"
				}
			],
			"groups":
			[
				{
					"selected": 2,
					"sheets":
					[
						{
							"buffer": 0,
							"file": "/media/storage/Documents/GitHub/GoogleFoobarSolutions/src/Level 4/LineUpTheCaptives/readme.txt",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 2432,
								"regions":
								{
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"BracketHighlighterBusy": false,
									"bh_regions":
									[
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content"
									],
									"bracket_highlighter.busy": false,
									"syntax": "Packages/Text/Plain text.tmLanguage",
									"vintage":
									{
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 0
									}
								},
								"translation.x": 0.0,
								"translation.y": 135.0,
								"zoom_level": 1.0
							},
							"stack_index": 2,
							"type": "text"
						},
						{
							"buffer": 1,
							"file": "/media/storage/Documents/GitHub/GoogleFoobarSolutions/tests/TestRunner.java",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 451,
								"regions":
								{
								},
								"selection":
								[
									[
										450,
										450
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.regions":
									[
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content"
									],
									"syntax": "Packages/Java/Java.sublime-syntax",
									"vintage":
									{
										"_vintageous_glue_until_normal_mode": false,
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 3
									}
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 1,
							"type": "text"
						},
						{
							"buffer": 2,
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 385,
								"regions":
								{
								},
								"selection":
								[
									[
										385,
										385
									]
								],
								"settings":
								{
									"auto_indent": false,
									"bracket_highlighter.busy": false,
									"bracket_highlighter.regions":
									[
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content"
									],
									"syntax": "Packages/Text/Plain text.tmLanguage",
									"tab_width": 2,
									"vintage":
									{
										"_vintageous_glue_until_normal_mode": false,
										"_vintageous_non_interactive": false,
										"_vintageous_processing_notation": false,
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 46
									},
									"word_wrap": true
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 0,
							"type": "text"
						}
					]
				}
			],
			"incremental_find":
			{
				"height": 23.0
			},
			"input":
			{
				"height": 31.0
			},
			"layout":
			{
				"cells":
				[
					[
						0,
						0,
						1,
						1
					]
				],
				"cols":
				[
					0.0,
					1.0
				],
				"rows":
				[
					0.0,
					1.0
				]
			},
			"menu_visible": true,
			"output.exec":
			{
				"height": 23.0
			},
			"output.find_results":
			{
				"height": 98.0
			},
			"output.git":
			{
				"height": 98.0
			},
			"pinned_build_system": "",
			"position": "0,1,0,0,0,0,0,0,0,1920,1080",
			"project": "",
			"replace":
			{
				"height": 42.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 500.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 380.0
			},
			"select_symbol":
			{
				"height": 400.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 400.0
			},
			"selected_group": 0,
			"settings":
			{
				"_vintageous_reset_during_init": true,
				"vintage":
				{
					"_cmdline_cd": "/opt/sublime_text"
				}
			},
			"show_minimap": false,
			"show_open_files": false,
			"show_tabs": true,
			"side_bar_visible": true,
			"side_bar_width": 230.0,
			"status_bar_visible": true,
			"template_settings":
			{
			},
			"window_id": 4,
			"workspace_name": ""
		}
	],
	"workspaces":
	{
		"recent_workspaces":
		[
		]
	}
}
